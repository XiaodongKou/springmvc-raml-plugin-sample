package com.phoenixnap.oss.sample.client.test;

import java.util.List;

import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.IntegrationTest;
import org.springframework.boot.test.SpringApplicationConfiguration;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.web.client.HttpClientErrorException;

import com.phoenixnap.oss.sample.client.DrinkClient;
import com.phoenixnap.oss.sample.client.model.CreateDrinkRequest;
import com.phoenixnap.oss.sample.client.model.GetDrinkByIdResponse;
import com.phoenixnap.oss.sample.client.model.GetDrinksResponse;
import com.phoenixnap.oss.sample.client.model.UpdateDrinkByIdRequest;
import com.phoenixnap.oss.sample.client.test.factory.DrinkFactory;
import com.phoenixnap.oss.sample.server.ServerLauncher;

/**
 * Test suite that runs integration tests to ensure the automatically generated DrinkClient & DrinkController
 * are working in sync. Client requests generated by the client should map directly onto an endpoint made available
 * by the controller. 
 * 
 *  
 * @author kristiang
 *
 */
@RunWith(SpringJUnit4ClassRunner.class)
@SpringApplicationConfiguration(classes = ServerLauncher.class)
@WebAppConfiguration
@IntegrationTest("server.port:8080")
public class TestDrinksClient {
    
    @Autowired
    private DrinkClient drinkClient;
    
    @Test
    public void getDrinksIntegrationTest() throws Exception{
        ResponseEntity<List<GetDrinksResponse>> getDrinksResponse = drinkClient.getDrinks();
        
        Assert.assertTrue(getDrinksResponse.getStatusCode().equals(HttpStatus.OK));
        Assert.assertTrue(getDrinksResponse.getBody()!=null);
        Assert.assertTrue(getDrinksResponse.getBody().size()>0);
    }
    
    @Test
    public void getDrinkByIdIntegrationTest_Pass() throws Exception{
        ResponseEntity<GetDrinkByIdResponse> getDrinksResponse = drinkClient.getDrinkById("fanta");
        
        Assert.assertTrue(getDrinksResponse.getStatusCode().equals(HttpStatus.OK));
        Assert.assertTrue(getDrinksResponse.getBody()!=null);
        Assert.assertTrue(getDrinksResponse.getBody().getName().equals("Fanta"));
        Assert.assertTrue(getDrinksResponse.getBody().getType().equals("SOFT_DRINK"));
    }
    
    
    @Test
    public void getDrinkByIdIntegrationTest_Fail_NotFound() throws Exception{
        try{
            ResponseEntity<GetDrinkByIdResponse> getDrinksResponse = drinkClient.getDrinkById("sprite");
            Assert.fail("The item should not be available! Are the server and client working properly?!");
        }catch (HttpClientErrorException hce){
            Assert.assertTrue(hce.getStatusCode().equals(HttpStatus.NOT_FOUND));
        }
    }
    
    @Test
    public void createDrinkIntegrationTest() throws Exception{
        CreateDrinkRequest createDrinkRequest = DrinkFactory.getDrink();
        
        ResponseEntity createDrinkResponse = drinkClient.createDrink(createDrinkRequest);
        Assert.assertTrue(createDrinkResponse.getStatusCode().equals(HttpStatus.ACCEPTED));
    }
    
    @Test
    public void updateDrinkIntegrationTest() throws Exception{
        UpdateDrinkByIdRequest updateDrinkRequest = new UpdateDrinkByIdRequest();
        updateDrinkRequest.setName("Beer");        
        
        ResponseEntity updateDrinkResponse = drinkClient.updateDrinkById("Martini", updateDrinkRequest);
        Assert.assertTrue(updateDrinkResponse.getStatusCode().equals(HttpStatus.OK));
    }
    
    @Test
    public void deleteDrinkIntegrationTest() throws Exception{        
        ResponseEntity updateDrinkResponse = drinkClient.deleteDrinkById("cocacola");
        Assert.assertTrue(updateDrinkResponse.getStatusCode().equals(HttpStatus.ACCEPTED));
    }
    
    
    @Test
    public void endToEndDrinksIntegrationTest(){
        //get list and establish base number of items 
        ResponseEntity<List<GetDrinksResponse>> getDrinksResponseOrig = drinkClient.getDrinks();
        
        //create item
        CreateDrinkRequest createDrinkRequest = DrinkFactory.getDrink();
        ResponseEntity createDrinkResponse = drinkClient.createDrink(createDrinkRequest);
        Assert.assertTrue(createDrinkResponse.getStatusCode().equals(HttpStatus.ACCEPTED));
        
        //get all drinks and assert they are one larger than when they started off 
        ResponseEntity<List<GetDrinksResponse>> getDrinksResponseAfterCreate = drinkClient.getDrinks();
        Assert.assertTrue(getDrinksResponseOrig.getBody().size()+1 == getDrinksResponseAfterCreate.getBody().size());
        
        //get created item 
        ResponseEntity<GetDrinkByIdResponse> getDrink = drinkClient.getDrinkById(createDrinkRequest.getName());
        
        //update item
        UpdateDrinkByIdRequest updateDrinkRequest = new UpdateDrinkByIdRequest();
        updateDrinkRequest.setName("Beer");        
        
        ResponseEntity updateDrinkResponse = drinkClient.updateDrinkById(getDrink.getBody().getName(), updateDrinkRequest);
        Assert.assertTrue(updateDrinkResponse.getStatusCode().equals(HttpStatus.OK));
        
        //get last updated details 
        getDrink = drinkClient.getDrinkById(updateDrinkRequest.getName());
        Assert.assertTrue(getDrink.getStatusCode().equals(HttpStatus.OK));
        //assert the new name is retrievable 
        Assert.assertNotNull(getDrink.getBody());
        Assert.assertTrue(getDrink.getBody().getName().equals(updateDrinkRequest.getName()));
        
        //assert the item is not accessible by its old name 
        try{
            drinkClient.getDrinkById(createDrinkRequest.getName());
            Assert.fail("The item should not be available! Are the server and client working properly?");
        }catch(HttpClientErrorException hce){            
            Assert.assertTrue(hce.getStatusCode().equals(HttpStatus.NOT_FOUND));
        }
        
        //delete item 
        ResponseEntity deleteDrink = drinkClient.deleteDrinkById(updateDrinkRequest.getName());
        Assert.assertTrue(deleteDrink.getStatusCode().equals(HttpStatus.ACCEPTED));
        
        //assert the item isn't available
        try{
            drinkClient.getDrinkById(updateDrinkRequest.getName());
            Assert.fail("The item should not be available! Are the server and client working properly?");
        }catch(HttpClientErrorException hce){            
            Assert.assertTrue(hce.getStatusCode().equals(HttpStatus.NOT_FOUND));
        }

        //assert list size is same as when we started off 
        ResponseEntity<List<GetDrinksResponse>> getDrinksResponseFinal = drinkClient.getDrinks();
        Assert.assertTrue(getDrinksResponseFinal.getBody().size() == getDrinksResponseOrig.getBody().size());
         
    }
    
    
}
